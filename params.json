{"name":"Raviolini","tagline":"Painless REST API Foundation","body":"# Intro\r\n\r\nRaviolini is a lightweight framework for building RESTful APIs, in Java 8. You simply provide your domain object and, out of the box, Raviolini gives you caching, configuration, logging, persistence, serialization and validation on that object. Moreover, pre- and post-execution hooks wil let you extend Raviolini beyond the original scope of CRUD (Create, Read, Update, Delete) operations.\r\n\r\nRaviolini is built on top of [Spark](https://github.com/perwendel/spark) (version 2.2) and [ORM Lite](https://github.com/j256/ormlite-core) (version 4.48). The former provides a lightweight HTTP foundation, while the latter provides a database abstraction layer and object-relational mapping.\r\n\r\n# Install\r\n\r\nThere are only two simple steps for you to install Raviolini in your project.\r\n\r\nFirst, add the [JitPack](https://jitpack.io/) repository to your build file (pom.xml):\r\n\r\n```xml\r\n<repositories>\r\n    <repository>\r\n        <id>jitpack.io</id>\r\n        <url>https://jitpack.io</url>\r\n    </repository>\r\n</repositories>\r\n```\r\n\r\nSecond, add the dependency:\r\n\r\n```xml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.github.otaviofff</groupId>\r\n        <artifactId>raviolini</artifactId>\r\n        <version>0.0.7</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\nThe above code assumes you use [Maven](https://github.com/apache/maven) to build your project. However, if you use [Gradle](https://github.com/gradle/gradle), [Sbt](https://github.com/sbt/sbt) or [Leiningen](https://github.com/technomancy/leiningen), then you should grab your code from [Raviolini on JitPack](https://jitpack.io/#otaviofff/raviolini/).\r\n\r\n# Use\r\n\r\nFirst, you need to code the resource you want to expose through your API. In this sample, our domain object is named `Dog`, and is defined by three simple attributes, namely `id`, `name` and `neutered`. Please note the `@JsonIgnore` annotation from [Jackson](https://github.com/FasterXML/jackson), as well as the `@DatabaseTable` and `@DatabaseField` annotations from [ORM Lite](https://github.com/j256/ormlite-core). Also note that `Dog` must implement the `Entity` interface, provided by [Raviolini](https://github.com/otaviofff/raviolini) itself. \r\n\r\n```java\r\npackage org.muttie.domain;\r\n\r\nimport org.raviolini.domain.Entity;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport com.j256.ormlite.field.DatabaseField;\r\nimport com.j256.ormlite.table.DatabaseTable;\r\n\r\n@DatabaseTable(tableName = \"dog\")\r\npublic class Dog implements Entity {\r\n    \r\n    @DatabaseField(generatedId = true)\r\n    private Integer id;\r\n    \r\n    @DatabaseField\r\n    private String name;\r\n    \r\n    @DatabaseField\r\n    private Boolean neutered;\r\n    \r\n    public Dog() {}\r\n    \r\n    @Override\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n    \r\n    @JsonIgnore\r\n    @Override\r\n    public Boolean isValid() {\r\n        return (neutered != null && name != null && !name.isEmpty());\r\n    }\r\n}\r\n```\r\n\r\nSecond, you need to code a front controller for your API. It will just make Raviolini listen to the HTTP port assinged, and add an HTTP router for the domain object you coded in the previous step. This router defines all valid URIs that will compose your final RESTful interface. Note that your `FrontController` has to extend `AbstractController`.\r\n\r\n```java\r\npackage org.muttie.api;\r\n\r\nimport org.muttie.domain.Dog;\r\nimport org.raviolini.api.AbstractController;\r\n\r\npublic class FrontController extends AbstractController {\r\n\r\n    public static void main(String[] args) {\r\n        listenToAssignedPort();\r\n        addRouter(Dog.class);\r\n    }\r\n}\r\n```\r\n\r\nFinally, you just need to create a configuration file (named ```application.properties```) in order to setup your application, database and cache. Optionally, you may also create another config file (named ```logging.properties```) to setup you logging preferences. Raviolini comes with [sample config files](https://github.com/otaviofff/raviolini/tree/master/src/main/resources) to help you out.\r\n\r\n```properties\r\n####################\r\n#  Application\r\n####################\r\n\r\napplication.name    = ${pom.name}\r\napplication.version = ${pom.version}\r\n\r\n####################\r\n#  Database\r\n####################\r\n\r\nraviolini.database.driver = relational\r\nraviolini.database.engine = postgresql\r\nraviolini.database.host   = localhost\r\nraviolini.database.port   = 15432\r\nraviolini.database.name   = db_name\r\nraviolini.database.user   = db_user\r\nraviolini.database.pass   = db_pass\r\n\r\n####################\r\n#  Cache\r\n####################\r\n\r\nraviolini.cache.driver = redis\r\nraviolini.cache.host   = localhost\r\nraviolini.cache.port   = 16379\r\n```\r\n\r\nThe full sample application can be found at repository [raviolini-sample](https://github.com/otaviofff/raviolini-sample).\r\n\r\nThis is it. Your RESTful API is done. Enjoy your day =)\r\n\r\n# Execute\r\n\r\n## Create Object\r\n\r\nRequest:\r\n```bash\r\nPOST /dog HTTP/1.1\r\nHost: localhost:4567\r\nContent-Type: application/json\r\n\r\n{\r\n    \"name\": \"Madalena\",\r\n    \"neutered\": true\r\n}\r\n```\r\n\r\nResponse:\r\n```bash\r\nHTTP/1.1 201 Created\r\nDate: Thu, 05 Nov 2015 12:17:48 GMT\r\nContent-Type: text/plain\r\n\r\n```\r\n## Read Object\r\n\r\nRequest:\r\n```bash\r\nGET /dog/1 HTTP/1.1\r\nHost: localhost:4567\r\nAccept: application/json\r\n\r\n```\r\n\r\nResponse:\r\n```bash\r\nHTTP/1.1 200 OK\r\nDate: Thu, 05 Nov 2015 12:18:01 GMT\r\nContent-Type: application/json\r\n\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Madalena\",\r\n    \"neutered\": true\r\n}\r\n```\r\n\r\n## Update Object\r\n\r\nRequest:\r\n```bash\r\nPUT /dog/1 HTTP/1.1\r\nHost: localhost:4567\r\nContent-Type: application/json\r\n\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Madalena\",\r\n    \"neutered\": false\r\n}\r\n```\r\n\r\nResponse:\r\n```bash\r\nHTTP/1.1 200 OK\r\nDate: Thu, 05 Nov 2015 12:18:01 GMT\r\nContent-Type: text/plain\r\n\r\n```\r\n\r\n## Delete Object\r\n\r\nRequest:\r\n```bash\r\nDELETE /dog/1 HTTP/1.1\r\nHost: localhost:4567\r\n\r\n```\r\n\r\nResponse:\r\n```bash\r\nHTTP/1.1 200 OK\r\nDate: Thu, 05 Nov 2015 12:18:01 GMT\r\nContent-Type: text/plain\r\n\r\n```\r\n\r\n## Read List\r\n\r\nRequest:\r\n```bash\r\nGET /dog HTTP/1.1\r\nHost: localhost:4567\r\nAccept: application/json\r\n\r\n```\r\n\r\nResponse:\r\n```bash\r\nHTTP/1.1 200 OK\r\nDate: Thu, 05 Nov 2015 12:18:01 GMT\r\nContent-Type: application/json\r\n\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Madalena\",\r\n        \"neutered\": true\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Martin\",\r\n        \"neutered\": false\r\n    }\r\n]\r\n```\r\n\r\n# Learn\r\n\r\n## Built-In Aspects\r\n\r\nBy default, Raviolini addresses six major non-functional requirements for your API, namely caching, configuration, logging, persistence, serialization, and validation. And this doesn't come at the expense of flexibility at all. You may still configure each one of these aspects by swapping out their drivers. \r\n\r\nFor example, you can define whether caching will be powered by Redis or Memcached, whether persistence will be powered by PostgreSQL or MySQL, whether serialization will output JSON or XML, whether configuration will be read from File or Environment, and whether logging will output to File or Memory.\r\n\r\nMany other drivers are available. Check them out below.\r\n\r\n### Caching\r\n- Package: [org.raviolini.aspects.data.caching](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/data/caching)\r\n- Drivers: [Null](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/data/caching/drivers/NullCacheDriver.java), [Redis](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/data/caching/drivers/RedisCacheDriver.java), [Memcached](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/data/caching/drivers/MemcachedCacheDriver.java)\r\n\r\n### Configuration\r\n- Package: [org.raviolini.aspects.io.configuration](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/io/configuration)\r\n- Drivers: [Environment](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/io/configuration/drivers/EnvConfigDriver.java), [File](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/io/configuration/drivers/FileConfigDriver.java)\r\n\r\n### Logging\r\n- Package: [org.raviolini.aspects.io.logging](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/io/logging)\r\n- Drivers: [DatedFile](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/io/logging/drivers/DatedFileHandler.java), [java.util.logging.Handler](https://docs.oracle.com/javase/8/docs/api/java/util/logging/Handler.html) (e.g. [Console](https://docs.oracle.com/javase/8/docs/api/java/util/logging/ConsoleHandler.html), [File](https://docs.oracle.com/javase/8/docs/api/java/util/logging/FileHandler.html), [Memory](https://docs.oracle.com/javase/8/docs/api/java/util/logging/MemoryHandler.html), [Socket](https://docs.oracle.com/javase/8/docs/api/java/util/logging/SocketHandler.html), [Stream](https://docs.oracle.com/javase/8/docs/api/java/util/logging/StreamHandler.html))\r\n\r\n### Persistence\r\n- Package: [org.raviolini.aspects.data.database](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/data/database)\r\n- Drivers: [Relational](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/data/database/drivers/RelationalDatabaseDriver.java) (e.g. PostgreSQL, MySQL), MongoDB\r\n\r\n### Serialization\r\n- Package: [org.raviolini.aspects.io.serialization](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/io/serialization)\r\n- Drivers: [JSON](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/io/serialization/drivers/JsonSerializationDriver.java), [XML](https://github.com/otaviofff/raviolini/blob/master/src/main/java/org/raviolini/aspects/io/serialization/drivers/XmlSerializationDriver.java)\r\n\r\n### Validation\r\n- Package: [org.raviolini.aspects.data.validation](https://github.com/otaviofff/raviolini/tree/master/src/main/java/org/raviolini/aspects/data/validation)\r\n\r\n## Architecture\r\nAs depicted by the following UML diagram, Raviolini is composed of lightweight, loosely-coupled, cohesive packages, with no cycles in its dependency structure.  \r\n\r\n![UML Package Diagram](https://dl.dropboxusercontent.com/u/111597/raviolini/packages.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}